データ構造とアルゴリズム第4週の説明は、有明高専の加藤が行います。これは本コースの講義スケジュールです。今回の第4週と次の第5週は、基本的なデータ構造について学習します。データ構造とは、計算機へのデータの蓄え方のことです。

データを効率よく扱うために、上手に組織化して記憶させます。このデータ構造とアルゴリズムはお互いに依存しています。詳しくは第1週の内容を確認してください。さて、今回は基本的なデータ構造について学習します。基本的なデータ構造には配列、連結リスト、スタック、ヒープ、2分探索木などがあります。この中で、上の四つについて今回お話し、下の二つは次回紹介します。

それでは最初に配列について学習しましょう。配列はこのようにS[N]という形で表されます。また、配列のイメージはこの図のような感じです。このように、連続したメモリー番地に配列はデータを保持しています。また、保持しているデータ数Nを変数に保持しています。

次に、計算量を見てみましょう。配列の数字を指定したデータアクセスの計算量はオーダー1で、非常に高速です。次にデータ探索についてですが、逐次探索を使用した場合はオーダーN、2分探索を使用した場合はオーダーログNになります。ただし、逐次探索の場合は、与えられたデータをバラバラに配列に保存していても並べ替えをせずに探索が可能です。

2分探索の場合は、データが順序良く並んでいる必要があります。そのため、配列要素の並べ替えが必要になる場合があります。次に、データの挿入と削除の手間について考えます。配列へのデータ挿入と削除にはいくつかの問題があります。

例えば、データの削除に伴い「開きます」が発生すると面倒になります。検索時や挿入時に「開きます」を区別する必要があったり、2分探索が使えないという問題が起こります。このため、「開きます」の処理が必要になります。また、データの順序を維持しようとすると、配列にデータを挿入したり削除したりする際に手間がかかります。

例えば、配列への挿入について考えてみます。このような配列の2番目に3を挿入したい場合、後ろの方から一つずつずらしていく必要があります。そして2番目が空いたので、そこに3を挿入します。このように手間がかかるということです。

挿入する場所が先頭であった場合には、すべてをずらさなければならないので、計算量は最悪でオーダーNになります。次に、配列からの削除について考えます。この2番目の6を削除する場合、6を削除した後に前の要素を順番に一つずつずらしていく必要があります。

これで「空きますがないデータの並び」ができました。もし先頭を削除する場合、すべての要素をずらすことになるため、計算量は最悪でオーダーNになります。これまでの話をまとめます。配列の長所は実装が容易で、データアクセスはオーダー1です。

2分探索を用いたデータ検索はオーダーのログNになります。しかし、短所としては、先ほど説明したように「空きます」をなくすために挿入や削除が最悪の場合、オーダーNかかるため非常に遅くなります。また、データの順序関係を維持しつつ詰め合わせを行うためにはアルゴリズム上の工夫がどうしても必要です。

さらに、最初に定義した大きさを超えてデータを格納することができないというのも短所になります。それでは、これについて何か工夫できないかと考えてみましょう。

配列のイメージは、ノートに先頭から順番にきっちり詰めて記録しているという形です。例えば、3と6の間に4を挿入したい場合、その6以降をすべて移動させて書き直さなければなりません。しかし、通常はすべてを書き直すのではなく、融通を利かせて書き足します。例えば、3と6の間に4を記号を使って入れたり、いらないものには線を引いたり、矢印を使って追加したりすることができます。

要は、順番さえわかればよいということですので、データそのものを律儀に並べる必要はないと考えました。つまり、順番を明確に定義できればよく、データ自体はバラバラに格納しても、順番だけ矢印で示しておけば問題ないのです。

このアイデアで考え出されたのが連結リストです。連結リストはデータと次の場所を示すポインター部から成り立っています。ポインター部には次の場所の番地が記録され、データ部とポインター部のペアを記録するデータ構造です。

連結リストはこのように一連のデータを数珠つなぎにして記録します。実際のメモリー空間での連結リストの例について説明します。格納するデータは53と278です。最初に、この120番地に5を格納します。ポインター部には次の番地である305番地を登録します。

次のデータ13は305番地に格納され、ポインター部には309番地が記録されます。つまり、305番地を指していることになります。

次に2を入れて、その次の127番地を指します。さらに725番地を指し、最後に8で終わります。このようにしてデータを格納していきます。先ほどの連結リストは、このように簡略化して図で表すことができます。

それでは、連結リストに対する操作の手間について、データの挿入、削除、検索それぞれについて考えてみます。まず、連結リストへの挿入ですが、挿入場所がわかっていればオーダー1でできます。例えば、この連結リストの13と2の間に1を挿入する場合を考えます。

この1のポインター部が2を指すように設定し、13のポインター部が1を指すように設定すれば挿入ができます。このように、2箇所の矢印を付け替えるだけで挿入ができます。データ数Nには関係がないため、オーダー1で計算できることになります。

この挿入のアルゴリズムは以下のようになります。まず最初に、新たな要素を挿入する直前の要素を検索します。ここでは13を探します。その後、新たな要素1を生成し、値と次の要素への参照を設定します。1が2を指すように設定し、直前の要素13が新たな要素1を参照するように設定します。

次に、連結リストからの削除を考えます。これも削除場所がわかっていれば、オーダー1でできます。例えば、2を削除する場合、その1つ前の13のポインター部を7の方に差し替えれば良いことになります。

このように、1箇所の矢印を付け替えるだけで削除ができますので、データ数Nには無関係で、削除もオーダー1でできます。この削除のアルゴリズムは以下のようになります。削除する要素の直前の要素を検索し、13を見つけます。その後、直前の要素から削除後の次の要素へ参照を設定します。つまり、13から2が指していた7に設定を変更することになります。そして、2の要素を削除します。

次に、連結リスト内でのデータの検索について考えます。検索はリストの最初から順に調べていきます。検索の種類としては、K番目の要素を検索することや、指定した値Xを保持している要素を検索することがあります。リストの計算量は最悪でオーダーNになります。これはリストの最後まで検索をした場合、オーダーNとなるためです。

次に検索アルゴリズムについて説明します。検索はリストの最初から順に調べていきます。見ている要素が指定した値であれば、その要素への参照を返します。そうでなければ、次の要素を確認します。これを最後まで繰り返していきます。

最後まで行って見つからなければ、検索失敗を返します。ここまでの話を整理します。先ほどは連結リストについてお話ししました。連結リストの長所は、場所がわかっていれば、挿入や削除がオーダー1で高速に行える点です。配列はオーダーNだったので、連結リストの方が早いことがわかります。

また、最初に定義したサイズを超えて自由にデータを追加できるという点も連結リストの長所です。これは配列ではできなかったことです。一方、連結リストの短所についてですが、9番目のデータのアクセスやデータ検索は遅く、最悪の場合オーダーNになります。

一方、配列はデータアクセス自体がオーダー1で高速です。また、2分探索の適用ができない点も連結リストの短所となっています。

次に、キューとスタックの話に移ります。キューとスタックは、データの挿入と取り出しという二つの操作に着目したデータ構造です。挿入とは、データを新しくデータ構造に記録することです。取り出しとは、データを読み出してデータ構造から削除することです。

次に、取り出しの順番について考えます。取り出しの順番は二通りあります。一つ目は、挿入された順に取り出す、つまり早い順に取り出されるという方法です。イメージとしては、レジでの行列を考えてください。先に並んだ人が先にレジを通過することができます。

二つ目は、最後に挿入されたものから取り出す、つまり遅い順に取り出されるという方法です。イメージとしては、山積みの書類を考えてみてください。書類を積んでいき、普通は上から処理をしていきます。

この早い順に取り出される方法をキュー、遅い順に取り出される方法をスタックで使用します。まずはキューについて説明します。キューは、投入された順に取り出す方法です。

挿入するときはキューの最後に挿入し、取り出すときは先頭から取り出します。この挿入のことを「enqueue」と呼び、取り出すことを「dequeue」と呼びます。キューは日本語では「待ち行列」とも呼ばれます。このように、最初に挿入したものが最初に取り出されるという特性を「First in FIrst out（FIFO）」といいます。読みとして「ファイフォ」や「フィフォ」とも言われます。日本語では「先入れ先出し」とも言います。

キューの活用例としては、プリンターのジョブスケジューリングや航空券予約のキャンセル待ちの処理などがあります。それでは、キューへの挿入や取り出しの例を見てみましょう。ここにあるヘッドやテイルは、メモリーの番地を保持しているポインターです。ヘッドは先頭の値を指し、テイルは末尾を指します。

例えば、6を挿入する場合、テイルが指している場所に値を挿入します。次にキューに挿入する場合は、テイルのポインタを一つ進めて、そこに9を挿入します。次に、dequeueの場合です。ヘッドを一つ進めると先頭のデータを指し、そこにあるデータを返します。

同じように、もう一回dequeueをすると、ヘッドを一つ進めて、そこにある値を返すことになります。このような状態になります。

次は、配列によるキューの表現について説明します。先ほども言ったように、ヘッドとテイルはメモリーの番地を保持しているポインターで、ヘッドは先頭の一つ前を指し、テイルは末尾を指します。

ここで、キューへの挿入、つまりenqueueのアルゴリズムについて説明します。キューへの挿入の場合、末尾のテイルを一つ進めて、そこに新しい要素を保存します。次は、キューからの取り出し、つまりdequeueのアルゴリズムです。ヘッドを一つ進めて、先頭の値を返します。

また、キューからの取り出しのアルゴリズムでは、ヘッドを一つ進めて、その場所にある要素を返すことになります。このように配列で実現する場合もありますが、他にも配列の先頭と末尾をつなげてリング（環状）とみなして実現する方法もあります。この場合、番地（インデックス）は配列サイズで割った余りとして扱います。

この時、キューがいっぱいか空かを判断するためには、先頭と末尾が一致するだけでは判断できませんので、そのためのアルゴリズムを考える必要があります。

次はスタックについて説明します。スタックは、最後に挿入された順に取り出す方法です。スタックに挿入するときは、一番上に挿入します。

取り出すときは一番上から取り出します。この挿入のことを「push」、取り出しのことを「pop」と呼びます。このように、後に入れたものを先に出すという特性を「Last in First our（LIFO）」、日本語で「後入れ先出し」と言います。

これは配列によるスタックの表現です。トップというポインターは先頭の一つ上を指しています。スタックへの値の挿入（push）のアルゴリズムは、このトップが指しているところに値を追加し、その後トップは一つ上に移動します。次はスタックから値を取り出すpopのアルゴリズムです。

popでは、トップの指し示すところを一つ下に移動させ、その場所にある要素を返します。次に、プッシュやポップの例を説明します。これは「push 7」を行った後の状態を示しています。この状態で「push 9」をすると、トップが指している場所に9が入り、トップは一つ上にずれます。

次に、popで値の取り出しを行います。現在、トップはここにあります。これを一つ下に下げ、その場所にある9を返します。その後、状態はこのようになります。

さらに「push 3」を行います。今、挿入している場所はトップが指しているところで、3を代入し、トップを一つ上にずらします。

先ほどは配列を使ってスタックを実現しましたが、次は連結リストを使ってスタックを実現してみます。これが連結リストですが、その先頭をヘッドが指しており、末尾をテールが指しています。

まず、キューへのデータの挿入ですが、連結リストの末尾にデータを挿入します。これはデータ数に関係なく、オーダーの1で行えます。ただし、末尾の位置は覚えておく必要があります。

次に、キューからデータを取り出す場合ですが、連結リストの先頭から取り出します。これもヘッドの位置を変更するだけで済みますので、計算量はオーダーの1で行えます。

次は連結リストによるスタックの表現です。

このように連結リストの先頭をトップが指しています。pushを行うときは、連結リストの最初、すなわち先頭にデータを挿入します。これはデータ数に関係なく、オーダーの1で行えます。popも同様で、連結リストの先頭からデータを取り出します。これもオーダーの1で行えます。

キューとスタックの整理をします。キューはFIFO（先入れ先出し）で行います。挿入、取り出しともにオーダーの一でできます。スタックはLIFO（後入れ先出し）になります。挿入、取り出しはキューと同様にオーダーの1でできます。

次にスタックの活用事例について説明します。例えば、スタックはカッコの対応検査やルーチンの呼び出し、後置記法の式の計算（逆ポーランド電卓）、それから後置記法の式の生成などに使われています。例えば、カッコの対応検査について考えてみます。

対応するカッコの例としては、こういうふうに開きカッコと閉じカッコがあります。上の例は正しいカッコの対応がなされているものです。しかし、下の例ではカッコが入れ子になっていることがあります。下の例では、例えばここにあるカッコには対応するカッコがありません。また、こちらは違うカッコが対応しています。こうなると、エラーが発生するということになります。

ここでトークンについて紹介します。トークンとは、プログラム中の個別の単語のことで、このようなものはすべてトークンと呼ばれます。

カッコの対応検査アルゴリズムについて簡単に説明します。ここではカッコの順番と種類を覚えておくためにスタックを利用します。まず最初にスタックを空にし、トークン列を左から順に読みます。開きカッコを読んだら、スタックにプッシュします。もしカッコが入れ子になっている場合には、複数の開きカッコをスタックに入れることになります。そして、閉じカッコを読んだら、スタックに貯めておいた開きカッコをポップして対応する開きカッコかどうか確認します。対応しない開きカッコならば、対応が取れていないということになります。

トークン列を読み終わった後で、スタックが空ならばカッコの対応が取れていますが、そうでなければ対応が取れていないということになります。

今回の話をまとめます。今回はデータ構造の実装方法について説明しました。配列の長所は、データアクセスがオーダーの1でできるため、非常に高速だということです。短所としては、データが大小順に並ぶ場合、挿入・削除ともに最悪オーダーNかかり、遅くなること、また最初に定義した大きさ以上にデータを格納できないことが挙げられます。

次に連結リストについてです。連結リストの長所は、場所がわかっていれば挿入・削除がオーダーの1でできることです。データ容量に関する制限が事実上ないという点も長所の一つです。短所としては、K番目のデータにアクセスするには、先頭から順にたどる必要があり、最悪の場合オーダーのNとなります。

次にデータの挿入・取り出しに特徴のあるデータ構造として、キューとスタックを紹介しました。キューはFIFO（先入れ先出し）のやり方で、挿入・取り出しともにオーダーの1でできます。スタックはLIFO（後入れ先出し）のやり方で、データの挿入・取り出しともにこれもオーダーの1でできます。

このキューやスタックは配列や連結リストで実現することができます。以上で今回の説明を終わります。お疲れ様でした。
