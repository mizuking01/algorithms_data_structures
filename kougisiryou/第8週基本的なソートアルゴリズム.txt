データ構造とアルゴリズム第8週の説明は有明高専の加藤が担当します。これは本コースの講義スケジュールです。第6週までは主にデータ構造の説明をしてきました。ここの第8週以降はアルゴリズムの話になります。今週と来週はデータの整列について説明していきます。

今回はデータの整列とデータを順番に並べるアルゴリズムについて話をしていきます。データの整列のことをソーティング、それからデータを順番に並べるアルゴリズムのことを整列アルゴリズムとかソートアルゴリズムと言います。また、今回は基本的なソートアルゴリズムとして、バブルソート、選択ソート、挿入ソートについて紹介します。さらに、挿入ソートの発展形として、シェルソートについても説明をします。

まず、データの整列について説明します。整列とは、N個のデータが与えられたとき、それらをある順序に並べ替える処理のことです。これから後は整列データを小さい順に並べ替えるとして議論します。データの整列は最も重要で基本的な問題の一つです。例えば、データが順番に並ぶと逐次探索ではなく、2分探索が使えるようになりますので、探索の効率が良くなります。

次に、整列を活用したデータ構造として、索引のデータ構造を紹介します。索引はあるデータがデータベース、ここで言えば、この表がデータベースになります。このデータベースのどこにあるかを短時間で見つけるために使用されています。索引は、キーとなる値とその値を持つレコード、つまり行を指すポインターの組になっています。この構造により、例えば同一データを異なる順序で管理できる実データを動かさずに整列できる。索引上で2分探索ができる索引だけを用いたデータ処理ができるといったメリットがあります。

次に、ソートアルゴリズムについて考えてみましょう。ソートアルゴリズムのイメージです。このように並んだ箱の中に数字が一つずつ入っている状態です。二つの箱を開けて中身の大小を比較します。また、必要に応じて箱から箱へ中身を移すことができます。この比較や移動の回数というのをアルゴリズムでは少なくすることが目標になります。

それでは基本的なソートアルゴリズムを紹介します。一つ目はバブルソートです。バブルソートはソートアルゴリズムの中でも最も単純なアルゴリズムです。データの比較回数やデータの交換、つまりコピーの回数がとても多くて、計算量はオーダーのN^2になっています。しかし、プログラミングは簡単なので、データ数が少ない場合には十分に使えます。

バブルソートのアイデアですが、配列の先頭から末尾までをチェックしながら隣同士を比較して逆順なら入れ替えるという操作を何度も繰り返して並べ替えを行っていきます。次に、バブルソートの動作例を示します。ソートしたい5個のデータがこのようにあるとします。これを先頭から末尾まで隣同士を比較していきます。

最初にこの58と49を比較して、これが逆順ですので、この場合は入れ替えをします。入れ替えをした結果がこのようになります。次に今度は58と39を比較します。これもまた逆順ですので、入れ替えをします。また、次に今度は58と90を比べます。これは順序が正しいですので、そのままで、さらに次の隣同士を比較します。これは入れ替えが発生します。ここで一番後ろに来た値というのがこの中の一番大きい値になります。

これで一回目のスキャンが終了したということになります。ただし、一回だけで並べ替えが終了するわけではなく、また繰り返し2回目、3回目とやっていく必要があります。次は2回目のスキャンです。先ほどと同じように先頭から隣同士を比較して順序を決めていきます。その結果、この一番下の状態が2回目のスキャンが終わった状態になります。

ここで一番後ろは一番大きい値ですが、今回新たに二番目に大きい値が後ろから二番目の場所に来ています。さらに3回目のスキャンをします。また、同様に相当していくわけですが、3回目が終わった時には、後ろから3つ目のところに三番目に大きい値が来ています。そしてさらにスキャンを続けていくことになります。

次に、バブルソートの動作について見てみます。先ほどの例で話したように、一回目のスキャンの後には一番後ろに一番大きい値が入っています。2回目のスキャンをした後は、後ろから二番目の場所に二番目に大きい値が入っています。ということで、K回目のスキャンの後にはK番目に大きい値が右端からK番目の位置に入っているということになります。このように、泡バブルがプクプクと受け上がるように決まっていくイメージですので、バブルソートとこのやり方を言います。

次にバブルソートのアルゴリズムについて説明します。ここでは、データが入っている配列の他に変数として相当済み位置と、それから現在着目している要素の位置を示す現在位置を使います。まず最初に相当済み位置を配列の末尾プラス一として初期化をします。

次に現在地を配列の先頭として、その現在地にある要素とその隣、その一つ先の要素を比較します。そして、逆順であれば、その二つの要素を交換します。これを現在地を一つずつずらしながら、同じことを繰り返していきます。そうすると配列の末尾のところが最大値になりますので、そこをソート済みとしてソート済み位置を一つ前にずらします。そしてまた、現在地を配列の先頭としてソートを繰り返していきます。最終的にソート済み位置が配列の先頭の方に来れば終了となります。

次はバブルソートの効率について説明します。先ほどのステップ2の繰り返し回数で、ソート済みの位置というのは、配列の末尾プラス一から配列の先頭プラス一まで行います。ステップ2を繰り返すたびにソート済みの位置は一つずつ減少しますので、N回ということになります。

次に、ステップ2の繰り返し回数を考えます。これは現在位置が配列の先頭から相当済み位置のマイナス二のところまで変わっていきます。ステップ2.1を繰り返すたびに、この現在位置を一ずつ進む形になります。なので、相当済み位置がIという場合には、この回数はIマイナス2回となります。

次に比較回数についてです。比較はステップ2.1.1で行っています。この実行回数は計算すると2分のN(N-1)となり、オーダーのN^2の手間がかかります。それから交換回数、コピーの回数なんですが、これはステップ2.1.2のところで行っています。これは最悪の場合はすべての場合で交換しますので、オーダーのN^2の手間がかかります。

2つ目の基本的なソートアルゴリズムは選択ソートです。この選択ソートの特徴として、コピーの回数、交換の回数を低く抑えることができます。つまり、比較はオーダーのN^2ですが、交換に関してはコピーに関してはオーダーのNとなります。選択ソートは各要素のサイズが大きい場合に有利です。

この選択ソートのアイデアとしてソート済みとミソートの二つの部分に分けます。そして、ミソートの部分から最小値を見つけて、それを取り出してソート済みの部分に追加していく。選択ソートのイメージはこのトランプのように、ミソートのトランプの中から小さい順に一枚ずつ取り出して並べていくようなイメージです。

次に選択ソートの動作例を説明します。ソートしたいデータがこのようにあります。このデータを先頭から調べて、最小値を見つけます。この最小値を一番先頭の値と入れ替えます。すると、こうなります。この最小値については、ここをソート済みとします。

ミソートの部分、ここの部分について最小値を調べます。次は39が最小値になります。この最小値と二番目の場所、49と入れ替えてこのような並びになります。この39までをソート済みとして、残りのミソートの部分、この部分の中から最小値を探します。

今回はこの49です。これは入れ替えなしで49のところまでをソート済みとします。そして、残りのミソートの部分を調べて、また最小値を見つけます。するとこれ58ですので、入れ替えをしてこの並びになります。これでソートが完了したということになります。

次に、選択ソートのアルゴリズムを説明します。ここでも配列にデータを入れておき、並べ替えを行います。変数としてはソート済みの位置と現在着目している現在の位置、それから最小値を探す際にとりあえず最小値かもというデータを入れておく最小値という変数を使います。選択ソートのアルゴリズムですが、まずソート済み位置を配列の先頭マイナス一として初期化をしておきます。

次にミソートの中の先頭の位置にある要素をとりあえずの最小値としてその値と位置を最小値の変数に格納します。そして、その最小値の値とミソートの中の要素を比較しながら、その中で一番最小値を見つけていきます。そのアルゴリズムがここにあります。

最終的にミソートの中から最小値が見つかれば、その最小値の要素とミソートの中の先頭の位置にある要素とを交換します。そしてミソートの先頭の位置をソート済みに変更して、また同じことを繰り返していきます。そして、最終的にソート済み位置が配列の末尾の方に来た場合には、処理を終了します。

次に選択ソートの効率について説明します。先ほどのアルゴリズムのステップ2の繰り返し回数を考えます。ソート済み位置というのは、配列の先頭マイナス一から配列の末尾マイナス一まで、そしてステップ2を繰り返すたびにソート済み位置は一つずつ進みます。つまり、N回繰り返したことになります。

また、ステップ2.2の繰り返し回数なんですが、現在位置は相当済み位置プラス二から配列の末尾まで、ステップ2.2を繰り返すたびに現在位置を一つずつ進めます。つまり、相当済み位置がIの時はIマイナス2回行われます。

比較回数はステップ2.2.1の実行回数になるわけですが、この実行回数は計算すると2分のN(N-1)となり、オーダーとしてはNの二乗になります。それからデータの交換、コピーの回数ですが、これはステップ2.3で行っています。この実行回数は最悪時、つまり毎回交換しているという場合でも、オーダーのNで済みます。これはステップ2の繰り返し回数と一致します。

3つ目の基本的なソートアルゴリズムは挿入ソートです。挿入ソートはほぼ整列済みのデータを整列するのに適しています。この場合は比較、それから交換、コピーですね。ともにオーダーのNでできます。ただし、最悪の場合はオーダーのN²になります。挿入ソートの考え方ですが、

選択ソートと同じようにソート済みとミソートの二つの部分に分けます。挿入ソートの場合は、ミソートの部分からソート済みの部分へ一つずつ挿入していくやり方です。ここでいちいち最大値とか最小値を求めない点に注意をしてください。イメージとしてはこのような感じです。

ミソートのトランプがあって、その中から九を取り出します。これをソート済みの、ここで言うと八と11の間に入れるというようなイメージです。それでは、挿入ソートの動作例を見てみましょう。これがソートしたいデータになります。まず、先頭の58のところをソート済みとします。そして、この次の49をこのソート済みに挿入することを考えます。まず、58と49を比較して49が58の前に行くことがわかります。そのため、この49の場所に58をずらします。

そして、別のところにとってあった49を先頭の方に挿入します。そして58のところまでこの2つ目までソート済みに変更します。次に、この39をこのソート済みのところのどこかに挿入することを考えます。39と58を比較して58の方が大きいので、58を39のところにずらします。次に49と39を比較して、これも49の方が大きいので49をずらします。そして、空いたところに別のところにとってあった39を代入します。

そして3つ目までソート済みということにします。これを繰り返していきます。次に、挿入ソートのアルゴリズムについて説明します。ここでもデータが入っています。変数はここにあるソート済み位置、それから現在着目している位置を示す現在位置、挿入したいデータをとりあえず格納しておく挿入要素、この三つになります。

まず最初にソート済みの位置を配列の先頭とします。そして、ソート済みの位置プラス一、つまりソート済み位置の次の位置に格納されている要素を挿入要素として変数に格納します。それから現在位置をソート済み位置として、ここのアルゴリズムを行うことで、ソート済みの中で挿入要素を入れる場所を決めます。現在位置の要素が挿入要素よりも大きければ、その要素を一つ後ろにずらします。挿入場所が決まったら、挿入要素を挿入位置に格納します。

そしてソート済み位置を一つ進めます。これをソート済み位置が配列の最後の方になるまで繰り返します。次に、挿入ソートの効率について説明します。まず、先ほどのアルゴリズムのステップ二の繰り返し回数について考えます。ソート済み位置というのは、配列の先頭から配列の末尾マイナス一まで、ステップ二を繰り返すたびに、このソート済み位置は一ずつ進むようになっています。つまり、これはNマイナス一回繰り返しています。

次にステップ2.4の繰り返し回数を考えます。現在位置はソート済み位置から配列の先頭まで、ステップ2.4を繰り返すたびに、この現在位置は一ずつ減少していきます。

つまり、ソート済み位置がIの時はI回繰り返すことになります。次に比較回数ですが、これはステップ2.4の繰り返し回数になります。最悪の時はオーダーのN²ですが、すぐに挿入場所が見つかる最良の場合にはオーダーのNでできます。それからホッピング回数。

これはステップ2.3の実行回数を数えます。最悪の時というのは常に一つずつずらす作業が入った場合ですが、これはオーダーのN²になります。最小の時というのは移動が一回だけで済む場合、この場合はオーダーのNになります。よって、ほぼソート済みのデータに対してはオーダーのNで動作します。

次にシェルソートを説明します。これは挿入ソートの発展バージョンです。ちなみにシェルというのは貝殻のことです。先ほど説明した挿入ソートには問題点がありました。コピー回数は一つずつずらすといった移動が多ければ、この回数がオーダーのN²になります。そこでシェルソートは、

飛び飛びの要素に対して挿入ソートを行います。例えばギャップH＝4の場合、これは4つ飛びでソートします。だから、項目048、12をソートして、次に159、13をソートしてというふうにします。こうやって挿入ソートを4回繰り返すことになります。

これでざっくりとソートするということです。これにより、なんとなく小さいものが配列の前の方に、大きいものが後ろの方に集まります。この飛び飛びの感覚ギャップですが、このギャップを小さくしていって、最後に通常の挿入ソートを行います。

この方法を取ると、オーダーのNに近づきます。ちなみに、このギャップの間隔Hを決める方法として、クヌース法というのがあります。それでは、クヌースの方法について説明します。クヌースの方法は、先ほどの飛び飛びの間隔を決める方法、ギャップHを決める方法です。

このギャップはここにある式で求められます。この数列を表に示すと、このようになります。最初のこのHKの値というのはデータ数Nよりも小さく、データ数はHK＋1よりも小さいか等しい、こういう範囲を満たすように選択する必要があります。例えば、

線個のデータをソートするという場合、先ほどの表から線というのはここに当たりますので、これよりも小さいHKを選ぶということで、Hの5の364を選びます。よって最初はギャップ364でソートします。次に2回目はそれの一つ下の、

121でソートします。3回目はギャップ40でソートします。繰り返して最終的にギャップ1でソートします。これは通常の挿入ソートと同じです。こういうやり方によって、最初は大まかにソートして、だんだん精度を上げていくというやり方になっています。

次にシェルソートのアルゴリズムについて説明します。ここでも配列にデータが入っていて、変数としてはギャップの間隔を表すH、それから上限、そして挿入要素のこの三つが変数になります。アルゴリズムのステップ1と2で最初のギャップの間隔Hを決めます。そして、

上限をHからNまで一つずつ増やしながら、ここにある処理をします。まず、上限の位置にある要素を挿入要素という変数に入れます。これを挿入するとします。そして、その挿入要素を上限、上限マイナスH、上限-2Hというふうに。

飛び飛びのデータを確認していって、挿入要素がどこに入るか探して適切な場所に挿入をします。ここにあるのが飛び飛びのデータになります。また、挿入する場合のアルゴリズムは、前に話した挿入ソートのステップ2.3から2.5のやり方と同じです。そして、挿入が終わったらギャップの値を減らして。

また3.1から繰り返していきます。最後にはギャップの値はH＝1となり、通常の挿入ソートを行います。そして次、ここでエイチがマイナスになりますので、このエイチがゼロより大きいという条件に当てはまりませんから処理を終了します。このシェルソートの特徴ですが、

実用性が高いです。挿入ソートよりも高速で、次回話すクイックソートよりも単純です。ただし、一般的な性能解析は困難になっています。なぜならば、ギャップHの決定法やデータの初期状態に依存するからです。このギャップの決定法はクヌースの方法などがあります。

今言われているシェルソートの効率というのは、実験に基づく推測値でだいたいオーダーのNの3/2乗からオーダーのNの7/6乗と言われています。まあ様々な評価結果があるということです。今までの話をまとめます。ここには比較回数とコピー回数の計算量を示しています。今回は、

上から四つの話をしました。この最初のバブルソートは、アルゴリズムが最も単純で実現がしやすいソートです。ただし、比較回数やコピー回数はオーダーのN²になっています。次に選択ソートですが、これはアルゴリズムは比較的簡単です。コピー回数がオーダーのNで済むため、

各要素のサイズが大きい場合に効率が良いです。3つ目は挿入ソート。平均比較回数がバブルソートの約半分で済みます。データがほぼソートされている場合には、オーダーのN時間で実行できます。最後にシェルソートですが、たかだかオーダーのNの3/2乗でソートできます。

多くの場合、挿入ソートよりも高速でクイックソートよりも単純と言われています。えっと今回は話してませんが、第4週で話をしましたヒープソート。これは最悪の場合でもオーダーのN log N時間でソートできます。ただし、ヒープを保存するためにオーダーNの余分な作業領域が必要となります。

以上で今回の説明を終わります。お疲れ様でした。