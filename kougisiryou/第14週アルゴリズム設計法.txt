データ構造とアルゴリズム第14週の講義を始めます。これは全体の講義スケジュールです。今回はアルゴリズムの設計手法について学習します。ここでは、再帰、分割統治法、グリーディー法、動的計画法、分子限定法の五つの設計手法を紹介します。これらは様々なアルゴリズムを設計する際に使われる共通の戦略です。

最初に再帰について説明します。再帰とは、自分自身を呼び出して問題を解く方法です。ここで再帰手続きや再帰関数というのは、自分自身を呼び出す手続きや関数のことです。一見すると不思議なやり方に思えるかもしれませんが、再帰は数学の帰納法と同じ原理です。

例えば帰納法では、P1が成り立つ、PKが成り立てばPK+1も成り立つと示します。再帰でも同じようなやり方でF1は解ける、F1からFkを利用してFk+1を解くという形で問題を解決していきます。再帰的に定義できる問題では、アルゴリズムを単純化することができます。

次に、再帰を用いたアルゴリズムの例を紹介します。再帰という考え方は、実はさまざまな分野で活躍しています。例えば、ソーティングでは、クイックソートやマージソートが再帰を使った例です。これらは配列を分割しながら再帰的に並べていくアルゴリズムです。また、木構造の探索にも再帰は欠かせません。各ノードに対する処理を再帰で実現します。

その他、式の値の計算やハノイの塔などがあります。このハノイの塔は最近の有名な例の一つです。問題は、A、B、Cの三本の棒と、中心に穴が開いたN枚の円盤があります。すべての円盤がAに積まれた状態から、円盤を一枚ずつ動かしてCに移動します。ただし、小さい円盤の上により大きい円盤を置いてはいけないというルールがあります。ルールはシンプルですが、円盤の枚数が増えると一気に複雑になります。

ここで注目すべきは、問題を分割できるという点です。N枚の円盤を動かす問題を、N-1枚の円盤をAから別の棒であるBに移動するという同じ構造のより小さな問題にしています。つまり、この問題をFNをF-1を使って解くという形になります。

このように、同じ構造の小さな問題に分割できるとき、再帰は非常に有効です。実際にコードを書いてみると、再帰で非常にすっきりしたプログラムになります。

次は分割統治法です。分割統治法は、問題をそのまま扱うのではなく、まず最初に分割、つまり部分問題に分けます。そして、各部分問題をそれぞれ解き、それらの解を統合して全体の解を得ます。分割統治法は、問題を小さく分けてそれぞれを解き、それらを組み合わせて全体を解くという戦略です。

例えば、国勢調査を考えてみてください。

政府が直接すべての市民を調査するのではなく、政府は各都道府県に住民の調査を依頼します。各都道府県は市町村に住民の調査を依頼します。そして、各市町村は住民の調査を行い、都道府県に報告をします。各都道府県は、市町村の調査結果を取りまとめて国に報告します。これはまさに分割統治と統合の流れですね。

アルゴリズムでは、例えばマージソートやクイックソートがこの考えを使っています。分割統治法の手続きは、一般的にこの三つのステップで構成されています。まず、一つ目は分割です。ここでは問題を複数の小さな部分問題に分けています。二つ目は解決です。ここではそれぞれの部分問題を解きます。部分問題が十分に小さければ直接解きます。まだ大きければ、部分問題をさらに分割して同じ手続きを再帰的に適用します。三つ目は統合です。得られた部分問題の解を利用して、全体の答えを構成します。

このように再帰を用いたアルゴリズムの多くが分割統治法も併用しています。ここで注意点としては、部分問題は与えられた問題よりもサイズが小さくなければならないということです。このようにサイズが小さくなっていなければ、再帰が止まらず無限ループになってしまいます。

次は、グリーディー法を紹介します。グリーディー法は欲張り法、または貪欲法とも呼ばれます。グリーディー法の基本方針は、今その時点で一番良さそうな選択をどんどんしていくというシンプルな手法です。例えばお釣りを渡す時、大きな硬貨から順に使えば手間が省けますね。これはグリーディー法が有効な例です。ただし、注意点としては、通常は最適ではない解が求まるということです。

常に最適解が求まるとは限りません。条件によっては後で不適切な選択になってしまいます。しかし、問題によっては最適解が求まることもあります。最適解が求まる例としては、最短経路問題に対するダイクストラ法、それから貨幣交換問題、最小全域木などがあります。

私たちは与えられた問題に対してグリーディー法が使えるかを見極める力が必要です。ここでは、グリーディー法の具体的な例として、貨幣交換問題を紹介します。問題としては、50円玉、10円玉、5円玉、一円玉があります。N円をこれらの硬貨で支払うとき、枚数を最小にしたいという枚数を求める問題です。

ここで、グリーディー法に基づくアルゴリズムを紹介します。方針としては、大きい金額の硬貨に優先的に交換します。まず、Nを50で割り、小さい金額の50円玉の枚数を求めます。次に、残金を求めます。残金はNから50×50円玉の枚数を引いた額です。次に、残金を10で割り、小さい10円玉の枚数を求めます。そして、残金から10×10円玉の枚数を引きます。さらに、残金を5で割り、小さい5円玉の枚数を求めます。残金から5×5円玉の枚数を引き、一円玉の枚数を求めます。これで問題を解決することができます。

貨幣交換問題では、グリーディー法でうまくいくことも多いです。先ほどのアルゴリズムを使えば、例えば127円を支払うとすると、50円玉二枚、10円玉二枚、5円玉一枚、一円玉二枚と、最初の枚数は合計七枚となります。このように大きな硬貨を優先して選ぶことで、結果的に最適解になることも多いです。ただし、硬貨の種類によってはうまくいかない場合があります。例えば、硬貨の種類として12ペンス、5ペンス、1ペニーを使った時です。これはイギリスの通貨単位の一つで、ペンスというのが最小通貨単位となります。

ペンス自体は複数形で、一の時だけペンスの単数形をペニーと言います。例えば、16ペンスを支払いたいという場合には、5ペンス硬貨3枚と1ペニー硬貨1枚の合計4枚が最小枚数となりますが、しかしグリーディー法では、12ペンス硬貨をまず選ぶので、12ペンス硬貨1枚と1ペニー硬貨4枚という合計5枚になってしまいます。このようにグリーディー法はうまくいく場合もありますが、問題の構造に合っていないと失敗をしてしまいます。

次は、グリーディー法がうまくいく例として、最小全域木問題を紹介します。まず、全域木とは、重み付き有向グラフの部分木のことで、頂点集合VはGの頂点集合と同じになります。また、辺の集合は閉路を含みません。そして、すべての頂点が少なくとも1つの辺に含まれるという条件を満たしています。

つまり、グラフにおいて、すべての頂点をつなぐための木構造を作るという問題になります。その中でも、辺の重みの合計が最小になるものが最小全域木となります。よって、最小全域木問題というのは、全域木のうち、辺の重みの合計が最小のものを求める問題です。

実生活では、複数の村を互いに行き来できるように道路を作りたい、光回線間の長さが最短になるような計画を立てようといった時に使います。これは全域木の例です。重み付き有向グラフになっています。ここで、すべての頂点をつなぐ木構造を考えます。例えばこのようなものです。

注意するのは、閉路巡回路ができないように作ることです。このように複数の木構造が考えられます。ここで、重みの合計がより小さいのは下の方になります。それでは、どうやって最小の全域木を作るのか、次のスライドで紹介します。

これはクラスカルのアルゴリズムの例です。クラスカル法は、辺の重みが小さい順に選ぶ方法です。ただし、木でなくなる、つまり巡回路ができるような辺は選ばないようにします。それでは、実際にクラスカル法で木を作っていきたいと思います。まず、この中で重みが一番小さい1の辺をこちらに追加します。

次に小さい重みの辺はこのE-D間なので、このE-D間に重み2の辺を追加します。さらに重みが小さい3の辺を追加します。3の辺は複数ありますが、巡回路ができないように選びます。今回はA-Bの間の辺を追加します。次に小さい辺ということで、今度は4を選びます。4の重みがあるC-D間に辺を追加します。その次となると6になりますが、これも巡回路ができてしまいます。

また、7も同様です。よって、これで最小の全域木ができました。これが最適解で、重みの和は最小となります。よって、クラスカルのアルゴリズムを用いると、重み付きグラフにおいて最小全域木が求められるという定理が成り立ちます。ここからは動的計画法、略してDPと呼ばれる手法を紹介します。

動的計画法の基本方針としては、サイズの小さな部分問題から順番に解き、結果を記録していきます。そして、目的のサイズまで達したら終わりです。次に、動的計画法の特徴です。

例えば、最近の問題では、同じ問題を何度も計算してしまうということがありました。しかし、動的計画法では、計算結果を記録することで、同じ問題を何回も解くことを防ぎ、計算量を削減することができます。その代わり、記憶領域が余分に必要になる場合が多いです。

この動的計画法の代表的な例としては、フィボナッチ数の計算、貨幣交換問題、ナップサック問題などがあります。例として、フィボナッチ数の計算について考えます。フィボナッチ数列は、最初の二つの値が1、1、その後は直前の二つの和を取っていくという数列です。

定義はこうなります。この定義をそのまま再帰で実行すると、アルゴリズムはステップ1「Nが0または1ならば1を返す」、ステップ2「そうでなければF(N-1) + F(N-2)を返す」と簡単に書けますが、問題もあります。それが次のスライドで見えます。

同じ計算の繰り返しです。この図を見てください。F5を求めようとした時の再帰的呼び出しの様子です。F5からF4とF3を呼び出し、またF3がF2とF1を呼び出す。このように、同じ計算が何度も何度も出現しています。

F1やF2は何度も無駄に計算しています。このようにF5のような小さい数であればまだよいのですが、F50などになると計算量は指数関数的に爆発します。この無駄な繰り返しをどうにかするために、次に紹介する動的計画法を利用します。

次に、動的計画法によるフィボナッチ数の計算の改善について話します。動的計画法では、F0から順に一度ずつ値を計算して配列に保存していきます。例えば、ステップ1、ステップ2、ステップ3、ステップ4、ステップ5、ステップ6と1回ずつ計算して、その値を配列に入力します。

このように、同じ値は一度しか計算せず、必要な時に値をすぐに取り出せます。よって、再帰に比べて格段に高速になります。ただし、配列などでF0からF5を保持する領域が必要となり、メモリを多く使ってしまうことになります。

先ほどの考え方をさらに改良します。実はフィボナッチ数列では、今必要なのは前の二つの値だけです。だから、配列を使わずに変数二つだけ利用します。ステップ1ではAにF0、ステップ2ではBにF1を代入、ステップ3ではF1とF0を足してAの変数に入れます。

ステップ4では、F2とF1を足してBの変数に入れます。これを繰り返していきます。このように改良したことで、動的計画法を適用しつつ、必要な変数を2個に削減でき、実装もシンプルになります。

次は貨幣の交換問題です。先ほどのグリーディー法では、この12ペンス、5ペンス、1ペニーの硬貨の場合、16ペンスを支払うときの問題に失敗してしまいました。今度は動的計画法を使って、確実に最小枚数を求めてみたいと思います。

動的計画法を用いたアルゴリズムの方針は次のとおりです。まず、1ペニー硬貨のみで支払う場合の解を求めます。次に、1ペニー硬貨と5ペンス硬貨を組み合わせて支払う場合の解に拡張します。最後に、12ペンスを含めた3種類の硬貨を組み合わせて支払う場合の解に拡張していきます。

それでは具体的に例を見てみます。まず、ステップ1の1ペニー硬貨のみで支払う場合の解を求めてみます。これは当たり前ですが、支払い金額がNに対して1ペニー硬貨をN枚必要とします。次に、1ペニー硬貨以外に5ペンス硬貨も使えるようにした場合、というのが次のステップ2になります。

ここで、支払い金額の0から4までは1ペニー硬貨のみで支払う場合と同じになります。次に、5ペンス硬貨をどう支払うかを考えます。場合1では、この4ペンスに1ペニー硬貨を加えて支払うという方法です。つまり、1ペニー硬貨だけで支払う場合となります。これは、硬貨の枚数は5枚となります。

もう一つの場合、今度は0ペンスに5ペンス硬貨を加えて支払う、つまり5ペンス硬貨1枚を使って支払う場合を考えます。すると、硬貨は1枚になります。この2つの方法の中で硬貨の枚数が少ない方を採用します。この場合、2番目の方法で5ペンス硬貨1枚を使うので、この表には1と記入します。この比較を金額ごとに繰り返すことで、グリーディー法では失敗した問題でも最小枚数を正確に求めることができます。

次は、12ペンス硬貨も加えて、3種類の硬貨を組み合わせて支払う場合を考えます。支払い金額が0から11までは、1ペニー硬貨と5ペンス硬貨を組み合わせて支払う場合と同じになります。ここで、Nが12以上のNペンスを支払う場合に、3つの方法が考えられます。

方法1は、N-1ペンスに1ペニー硬貨を加えてNペンスを支払う場合です。方法2は、N-5ペンスに5ペンス硬貨を加えてNペンスを支払う場合です。これは5ペンス硬貨を使った場合になります。方法3は、N-12ペンスに12ペンス硬貨を加えてNペンスを支払う場合です。これは12ペンス硬貨を使った場合となります。

これらの3つの方法について、硬貨の必要枚数を求めて最も少ない場合を採用します。

このように動的計画法を用いると、硬貨の種類によらず最適解を求めることができます。ここから紹介するのは分子限定法という手法です。例えば、将棋やチェスのAIは先の手を読んで勝てるかどうか判断しています。しかし、すべての手を読んでいたら計算量が膨大になります。

分子限定法は、このように全探索で探索する場合に有効です。分子限定法では、見込みのない枝の探索は早めに打ち切るという工夫をします。つまり、分子限定法は、すべてを試さずに、可能性のあるところだけを探索するという戦略をとっています。

見込みがあるかないかは問題によって判断基準が違います。どのように判断するかが工夫のしどころとなります。では、分子限定法をMax-SAT問題に応用してみます。Max-SAT問題とは、論理式の満足度を最大化する問題です。入力は論理式になります。例えば、このような複雑な論理式Fが与えられたとします。出力は、論理式Fを構成する節について、満足する節の数が最も多くなるような変数の組み合わせを求めます。

これは全探索でも解けますが、変数の数が増えると2のN乗通りの組み合わせができてしまいます。そこで、分子限定法を使ってみたいと思います。

スライドには、具体的な変数の割り当てと、それぞれで満たされた節の数が記載されています。例えば、一番上のXの値がすべてTの場合、10個の節のうち1つだけがFです。つまり、節の中で9個が満たされているという状態になります。

次に、Xの値にtfftと与えられた場合、Fが3つありますので、節の数10個の中で7個しか満たされていないという状態になります。このようなことをすべての組み合わせで試すのは大変なので、ここで分子限定法で枝を減らす方法を使います。

これは変数への割り当てを表す木構造です。一番上からX1がTの時とFの時で枝が分かれています。さらに次の節からはX2がTまたはX2がFで枝分かれしています。

同じようにX3、X4と枝分かれしていきます。これは、深さ優先探索を用いて、変数へのすべての割り当てを調べている状態です。この時、この枝は探索しても意味がないとわかる場合には、その枝以下の探索を打ち切る、つまりカットするというのが分子限定法の考え方です。

それでは先ほどの図を参考に、分子限定法を用いたMax-SATの解法を見ていきます。これは節ノードごとに、ここに書いてある4つの項目について記録をしていきます。記録をするのは、1つ目が変数への割り当て、2つ目が充足される節とその数、3つ目が充足されない節の数、4つ目が未定節、つまり、これから充足されるかもしれないというまだわからない節の数になります。

まずノードAの場合、変数AはX1にTが割り当てられたとします。この時、X1を含む節は6個あり、これらの節は必ずTになります。一方、充足されない節の数は0個です。そして、まだわからない節が4個です。

次に、X1とX2にTが割り当てられた場合、つまりX1またはX2を含む節において、Tが答えとなる節が8個あります。その状態でFという答えになる節が1個で、まだ答えがわからない節が1個あります。次にノードCの場合を考えます。変数の割り当ては、X1、X2、X3がすべてTと割り当てられた時です。

X1、X2、またX3を含む節で、答えがTになるのが9個、一方その答えがFになるものが1個。TになるかFになるかどちらになるかわからないという節はありません。このゼロ個というのが大事になります。ここで未定節がゼロになると、ノードCの下にあるノードD、それからノードEに関しては、もうノードCにて充足できる節数が確定しているので、探索は不要になります。つまり、探索をやめる、枝を切るということになります。同様にこちらも続けて考えていきます。このようにして探索不要というのを見つけていくことで、全体の探索量を大幅に減らすことができます。

今回の講義をまとめます。今回は5つのアルゴリズム設計手法を学習しました。一つ目は再起、二つ目は分割統治法について説明しました。分割統治法では、問題を分割し、個別に解いて、それらの解を利用して全体の解を得ます。分割と再起は組み合わせて使う場合も多かったです。

三つ目はグリーディー法です。グリーディー法は、各時点で局所的に最善のものを選んでいく手法です。四つ目に動的計画法を説明しました。動的計画法は、サイズの小さな問題から順番に解きながら解を記録していきます。そして、記録した解を活用して、全体の解を得ると同時に処理を高速化します。

最後に、分子限定法について説明しました。分子限定法は、全探索を総当たりで行いますが、見込みのない探索は早めに打ち切ります。これらは様々なアルゴリズムを設計する際に使われる共通の戦略となっています。問題によって最適な戦略は異なります。ぜひ、どんな手法が使えるかを考える癖をつけていってください。

これで講義を終わります。お疲れ様でした。