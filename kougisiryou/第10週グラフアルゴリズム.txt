データ構造とアルゴリズム第10回の説明は、有明高専の加藤が行います。これは本コースの講義スケジュールです。今週はグラフアルゴリズムについて説明します。今回は最初にグラフの定義や表現について説明し、それからグラフの探索として、幅優先探索と深さ優先探索について紹介します。

最後に探索の応用として探索技法、そして全知記法、中知記法、高知記法の話をしていきます。まず最初にグラフの定義です。グラフはC＝（V, E）で表されます。Vというのは頂点の集合、Eというのは辺の集合で、その組がグラフとなっています。

そして、このVの頂点の数はN、Eの辺の数はM個とします。辺がこのように中括弧でくくられて、二つの頂点を中に書いてあった場合には、これは無向辺を表しています。無向辺とは向きがない辺、矢印がない辺のことです。一方、丸括弧で二つの頂点が書いてある場合には有向辺となります。

これは矢印のある向きのある辺ということになります。ここで左側のVIというのが始点になって、VJというのが終点、矢印の先ということになります。それでは、グラフの例として最初に無向グラフを紹介します。無向グラフは、名前の通り向きのない辺を使ったグラフになります。ここで丸で書いてあるのが頂点です。

頂点と頂点を結ぶ線を辺と言います。また、エッジとも言います。もしこのように頂点が1から6までの6個の頂点を持つとすると、辺はこのように1と2に辺がありますので、中括弧の（1, 2）、それから1と4にもありますから、中括弧の（1, 4）というふうに書いていきます。

これがすべての辺を表しています。次に有向グラフです。有向グラフは、先ほどの無向グラフと違って辺に向きがあります。これを有向辺と言います。これも先ほどと同じように、頂点としては1から6の6個なんですが、辺の表し方として丸括弧で（2, 1）となっています。これは2から1に向かって矢印があるという意味になります。それから（3, 2）の場合は3から2に向かって矢印があるということです。このようにして、この有向グラフを表しています。

次は重み付き無向グラフです。この辺のところに重みがついています。今ここには数字がありますが、こういう重みがあるということです。重みの例としては、例えば道路の料金、それから所要時間、容量、重要度、コスト、いろいろな重みを定義することができます。ここでは、重み付きの無向グラフを紹介していますが、同様に重み付きの有向グラフ、矢印のあるグラフも定義することができます。

ここまでがグラフの種類です。次にグラフを表現するデータ構造について紹介します。グラフを表現するデータ構造としては、行列のやり方とリストのやり方があります。まずは行列の方、隣接行列について説明します。例えば、このように無向グラフがあった場合、（i, j）というのは辺の要素なんですが、iからjに向かって辺がある、矢印があるという意味になります。これをi行j列として行列に書いてみます。

例えば、先ほどの（2, 1）に対して矢印があるという場合には、行の2、2行のところ、そして1列のところに1を書きます。また、例えば（3, 2）から矢印がある場合には、3行2列のところに1があります。ゼロのところは辺がないところです。このようにして行列で表すことができます。つまり、二次元配列で実現ができます。次に無向グラフの場合の隣接行列を考えます。

この場合は矢印がありませんので、1と2の辺というのは、このように1行2列のところに1、そして2から1と見て、2行1列のところに1が立ちます。つまり、この無向グラフは対称行列になっています。

それでは、隣接行列の効率についてです。隣接行列は記憶領域がオーダーのN²をかかります。そのため、グラフがスカスカの時は領域が無駄になってしまいます。一方、各辺のアクセスは定数オーダーで早いです。

この隣接行列は、グラフが密な場合に向いているデータ構造です。次に隣接リストについて紹介します。例えば、このような例がある場合、隣接リストは配列と連結リストを組み合わせて使います。例えば、2から1に矢印があるという場合には、配列の2番目のところから1というリストにつなげます。

例えば、4であれば、4のところの矢印を考えると、4からは1と2と3と5に矢印が向いています。これを配列の4のところから1, 2, 3, 5と頂点をリストでつないでいきます。この隣接リストの効率ですが、記憶領域としては、この配列のN分とリストの分M分なので、オーダーのN + Mになり、記憶効率としては先ほどの隣接行列よりも良くなります。一方、辺のアクセスに関しては辺は逐次探索をしますので、ここから一つずつ見ていくという形ですので、グラフがスカスカの時には低速になります。

そこで隣接リストというのは、グラフがスカスカの場合に向いているということがわかります。それでは、次にグラフの探索について説明します。ある頂点vを出発点として、vの連結部分のすべての頂点を調べるということを行います。ここで問題になるのが、どの順番で頂点を調べるかということです。

ここでは頂点を訪問していく順番として二つの戦略を紹介します。一つは幅優先探索です。これは出発点から近い順に訪問をしていきます。もう一つは深さ優先探索です。これは行けるところまで突き進みながら訪問するやり方です。

まずはこの幅優先探索について説明します。幅優先探索の例です。このグラフは前の例と一緒です。視点を1、そしてここから始めるとすると、幅優先探索はまずは距離が1のところ、2と4と5、ここを先に探索します。そして次に距離が2のところ、例えば、1-2というふうに3、それから5-6といった具合に、これをその後に探索します。

つまり、頂点を最初に1から、次に2, 4, 5のどれか、そして3, 6のどれかというふうに訪問していくやり方です。例えば、0-1の場合は1から2, 4, 5を訪問し、その後で3に行きたいのですが、この場合は一回4に戻って3に行きます。そして6に行きます。2の場合は1から始めて1-4-2-5-6-3と、これは一筆書きのように戻ったり、頂点の重複なく訪問することができました。

どちらがいいかというと、例2の方がいいということがわかります。この幅優先探索の得意とするところは、最短経路を見つける問題です。こういった時に幅優先探索を使います。次に深さ優先探索の例について説明します。

深さ優先探索は行けるところまで突き進みながら訪問します。例えば、視点を1とすると、1から2、3、4、5、6というふうに探索をしていきます。例2の場合は1から5、4、3、2というふうに探索します。ここで6に行きたいですが、直接はいけませんので、一旦戻って6に行きます。このように深さ優先探索でも行き方はいろいろあります。

先ほどのように戻るという操作が起こらないように、頂点を2回訪問しないように工夫する必要があります。ちなみに、深さ優先探索の得意とするところは、すべての経路探索や迷路探索、経路の検出となります。

構造とは異なり、無向グラフでは同じ頂点に複数の経路で到達できる可能性があります。そのため、幅優先探索、深さ優先探索ともに、すでに訪問した頂点を再度訪問しないように、うまく順番を決める必要があります。

ここまでグラフの定義と表現、それからグラフの探索方法として、幅優先探索と深さ優先探索について説明しました。この後はグラフ探索の応用として探索木 の話、それから数式の全知機法、中知機法、後置記法 について話をします。

まず例として特化問題について説明します。有名な問題です。条件として、1人の男が狼、ヤギ、神を連れて川を渡ろうとしています。川にはボートがありますが、男の他には一つのものだけしか積めません。しかし、男がいなければ狼はヤギを食べてしまうし、ヤギは神を食べてしまいます。

このようなことが起こらないように、川を渡るにはどのようにすればよいか、可能な解を1つだけ求めてください。なお、川を渡る際にはボートに男が乗っていなければなりません。しかし、男がいなくても動物は逃げないとします。この問題に対して、探索木 を作るためにまず可能な状態をこのように列挙してみます。

ここで、Lとあるのが川の左岸、Rとあるのが川の右岸にいるとします。状態番号1番目、最初の状態は男、狼、ヤギ、神すべて左岸にいるとします。わかりやすいように、このように図で1つずつ表していきます。この左側が左岸、右側は川の右岸のことを指しています。

2番目は神だけが右岸にいる状態です。このようにすべてのパターンを出しています。ここで、この全員が左岸にいる状態を初期状態、全員が右岸にいる場合には最終状態とします。ここで条件においてヤギと神が一緒にいると食べてしまいますので、こういう状態は作らないようにします。ここも、狼とヤギが一緒で、男がいなければ狼がヤギを食べるので、この状態もダメです。狼とヤギと神が一緒の場合も、狼はヤギを食べ、ヤギは神を食べるのでこれはダメです。そうやって不正な状態、ダメな場合を削っていきます。

それでは探索木 を作ってみたいと思います。

初期状態は状態1の分です。この後、川を渡って右岸に行くのが男だけの場合、それから男と狼の場合、それから男とヤギの場合、それと男と神の場合、この4つが考えられます。なぜなら、川を渡る時にはボートに男が乗っていなければならないので、この4つの状態が考えられます。

ここで、狼とヤギが一緒にいると狼がヤギを食べます。また、ヤギは神を食べますので、これは状態として成り立たないものです。それから、13番の状態はヤギと神が一緒なので、これもダメです。11番は大丈夫です。10番は狼とヤギが一緒にいますので、これは狼がヤギを食べますからダメです。

そうなると、初期状態の次の状態というのは11番の状態しかないということになります。さらに、これから男が左岸にボートで移動する場合、ヤギだけを残していく場合と、それと男がヤギを連れて左岸に戻るという場合の2つの場合があります。

この1の場合は初期状態になっていて、すでにもう調べた状態になります。この先を探索しても新たな情報は得られないので、探索をここで打ち切ります。これを分子限定法と言います。それでは、この3の状態、ここから見ていきます。これから今度は男がボートで右に移るわけですが、男だけが右の岸に移動した場合はこの状態になります。それから男と狼が右岸に移動したらこのような状態、男と神が移動した場合はこうなります。

ここで最初の11の状態はすでに調べた状態なので、探索を打ち切ります。なので、15と12の状態についてさらに考えていきます。

この15と12について、続きを考えます。まず15ですが、この状態で男が左岸に移動する場合、それから男とヤギが左岸に移動する場合があります。ここで狼とヤギが残ってしまいますので、これはバツになります。こちらは問題はありません。

次は12の方の状態からの遷移を考えます。今度、男が左岸に移動する場合、このようになります。それと、男がヤギを連れて移動する場合がこうなります。ここでヤギが神を食べてしまいますね。この状態はダメになります。一方2の場合は問題ないです。

次、5についてさらに見ていきます。今度は男だけ移動した場合はこうなります。男が神と移動した場合にはこうなります。ここで、こちら側はヤギと神が左岸に残っていますので、これはバツです。で、14の状態は特に問題はありません。

次に、2の状態の時に男が右岸に移動するとします。この場合、狼とヤギが左岸に残っていますので、これはダメになります。次にこの14番の状態に対して、今度は男が左岸に移動します。これは問題はないです。もう一つ、男が狼と一緒に左岸に戻ります。これも問題はないです。

ただし、この2番というのはここに2番があって、その後の10という10番の状態でダメになります。なので、もうここで打ち切ります。すでに調べた状態ということになります。じゃあ残っているこの6番の状態に対してさらに考えます。ここで男とヤギが一緒に右岸に渡ると最終状態になりますので、ここで探索終了となります。

ということになります。先ほどの探索技法より、問題の解を求めます。これは根の初期状態から最終状態となった葉のところまで順にたどっていけばいいということになります。最初に男はヤギを連れて川を渡ります。次にヤギを残して戻ります。3番目に狼を連れて川を渡ります。

そして4番目にヤギを連れて戻ります。5番目に神を運んで川を渡ります。6番目に狼と神を残して戻ります。で、7番目にヤギを連れて川を渡ります。それで探索終了となります。これは横に考えながら見ていきました。

幅優先探索をしながら探索機を作ったとき、これはこの問題の探索機というのは、幅優先探索の応用になっています。次に深さ優先探索の応用として、木構造 の操作の概念について説明します。これが木構造 です。これをめぐる経路というのが決まっています。深さ優先探索でいきます。

ルートノードの方から左の方に一番下まで行って、それからこのような形でたどっていきます。つまり、一つのノード節点 に対して3回アクセスがあります。このように一回目、2回目、3回目というふうに3回アクセスがあります。ここで窓A, B, Cとありますが。

一回目のアクセスの時に窓A、2回目のアクセスが窓B、3回目のアクセスを窓Cとして、その場合によって使い分けます。最初はpre order です。これは木構造 をたどりながら、1回目のアクセスの時に節点 の値を見ていきます。このように見ていくわけですが、一回目のアクセスの窓Aのところを順番に見て、ここに並べています。6、7、8、9、10、11このようになります。

pre order の再起構造について見てみます。最初は節点 を見ます。次に左の部分木を見ます。それが終わったら右の部分木を見ます。で、この左の部分木のところさらに2を節点 として左の部分木を見て、その次右の部分木を見ます。さらに3を節点 として左の部分木を見て右の部分木を見る。このように再起構造になっているのがわかります。

さらに右の部分木も同じように、今度は7を節点 として左の部分木、そして右の部分木を見ると、右の部分木の方でまた9を節点 として左の部分木、右の部分木を見ると、このように再起を使ってやっています。次に、木構造 の操作アルゴリズムのpre order の場合について説明します。

まず、終了条件になるのですが、木が空ならば終了します。そうでなければこの処理をします。まずは木の根節点 を探索し、その後に左の部分木を再帰的に探索、次に右の部分木を再帰的に探索します。再帰的に探索するのですが、停止条件としてこの1番があります。

次に2つ目のin order の操作方法を説明します。これも木構造 をたどるのですが、今度は2番目のアクセス窓Bのところを順番に見ていきます。なので、最初は4のところまで行って、下の2番目のアクセス窓Bのところを見ます。それから見えた順に、4, 3, 5, 2, 6, 1, 8, 7, 9, 11というふうに見えた順に節点 を並べます。このように最初に左の部分木を見て、次に節点 を見て、それから最後に右の部分木を見るという順番でやっていきます。

この操作アルゴリズム、in order の場合ですが、さっきと同じように最初は木が空ならば終了します。そうでなければこの部分を繰り返します。最初に左の部分木を再帰的に探索します。次に節点 を探索して、最後に右の部分木を再帰的に探索します。この場合、木の節点 が2番目に探索されます。3つ目はpost order です。

木構造 をたどりながら、今度は3回目のアクセスの時に節点 の内容を見ます。ここの4の節点 は3回目のアクセスで見れます。それから、5, 3, 6, 2、今度は8, 10, 10, 19。

最後が根節点の1となります。最初に左の部分木を見て、次に右の部分木を見て、最後に根節点 を見るという順番です。このpost order のアルゴリズムはこのようになります。これも一番最初は木が空ならば終了します。そうでなければ、ここの処理をします。最初に左の部分木を再帰的に探索します。

次に右の部分木を再帰的に探索します。で、最後に木の根接点を探索する。そして、この再帰に関してはこの一番が停止条件になっています。で、このpost order の場合は、木の根節点 は一番最後に探索するということになります。次に、後置記法 について説明をします。ここに書いてある、

「(12 + 3) × 4」といったのは、私たちが普段使っている計算式です。これを木構造 で表すとこのようになります。12 + 3、この答えと4をかけるといった感じです。複雑な式もこのように書くことができます。この式の木構造 を先ほど3つ目に話したpost order で操作すると、

後置記法 が得られます。後置記法 のことを逆ポーランド記法とも呼びます。計算式の記法には、ここに紹介する三つの方法があります。これは演算子を置く場所で変わってきます。まず最初に中知機法です。これは私たちが普段使っている数式です。この数式を木構造 で表すとこのようになります。

括弧の部分は省いています。2つ目は前置記法 です。これは演算子が前に来ているものです。この前置記法 は計算式の木構造 から求めることができます。先ほど説明したpre order の操作で求めることができます。pre order は一つの節点 において一回目のアクセスの時に値を拾ってきます。

窓Aという場合です。だからまず「×」+「+」XYZというふうになります。括弧は省略してます。これは関数呼び出しなどで使われています。3つ目は後置記法 です。別名逆ポーランド記法とも呼ばれます。これもこの木構造 から

求めることができます。後置記法 の場合は、post order の操作で求めます。post order は一つの節点 の3回目のアクセスの時に値を呼び出します。なので、まずこう操作をして、Xの3回目、ここでまず読みます。なので、X、それからY、プラス。

とかけるというこの順番になります。この3つ紹介したんですが、この中でも前置記法 や後置記法 では括弧を省略することができます。括弧を省略しても、式の意味が一意に定まりますので、曖昧さがありませんのでよく使われています。特に後置記法 については、この式はスタックを用いて簡単に計算ができるので有名です。

それでは、後置記法 の式の計算をスタックを用いてやってみたいと思います。例えば、後置記法 の式「12 + 3 × 4」を計算します。最初はスタックは空になってます。で、12を入力します。そうするとスタックに12がpushされます。次に3を入力します。

この3はスタックのところにさらにpushされて、このような状態になります。次に演算子「+」を入力します。すると一旦スタックに入っていた3と12がpopされて、その3と12を足してその値15をpushします。次に4を入力します。これはスタックにpushされてスタックはこのような状態になります。

で最後に「×」が来ます。この掛け算の記号が来たらpopする4と15をpopして4と15を掛けてその答え60をpushします。入力が終わりましたら、スタックの中身をpopして出力します。スタックの中は空になります。つまり、この。

後置記法 の式の値は60になったということです。この後置記法 の式の値を計算するルール規則としてここに挙げています。トークンを順に読みながら、トークンの種類ごとに以下の処理を行います。トークンが数値の場合はスタックに数値をpushします。演算子の場合はスタックから二つの値をpopして演算を行います。

そして演算結果をスタックにpushします。トークンが残っていない、つまり式を全部読み終えて終わったという場合には、スタックから値をpopしてそれを出力します。この出力した値が式の値になります。

今回の話をまとめます。今回はグラフアルゴリズムの話をしました。最初にグラフの定義として無向グラフ、有向グラフ，重み付きグラフなどを紹介しました。それからグラフの表現として、隣接行列と隣接リストについて説明しました。グラフが密な場合は隣接行列の方が効率が良くて、グラフがスカスカの場合は隣接リストの方が効率がいいということを紹介しました。

それからグラフの探索方法として、幅優先探索と深さ優先探索について紹介しました。そして最後に探索の応用ということで、探索木 の話、それから計算式の書き方として、前置記法 、中置記法 、後置記法の話をしました。これらは木構造 の操作から求めることができます。

以上で今回の説明を終わります。お疲れ様でした。